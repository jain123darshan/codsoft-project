# -*- coding: utf-8 -*-
"""Titanic_survival_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pd2DumuR_heI9Gnvs32qnptH_OlrffrQ

Titanic-dataset prediction
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path = '/content/drive/My Drive/Titanic-Dataset.csv'
df = pd.read_csv(file_path)
df.head()

df

df.info()

df.shape

df.describe()

df.isnull().sum()

df=df.drop(columns='Cabin',axis=1)

df['Age'].fillna(df['Age'].mean(),inplace=True)

#finding the mode value of embarked column
print(df['Embarked'].mode())

print(df['Embarked'].mode()[0])

#replacing the missing values in embarked column with mode value
df['Embarked'].fillna(df['Embarked'].mode()[0],inplace=True)

df.isnull().sum()

"""Data Analysis

"""

#getting some some measures about the data
df.describe()

#find how many people survive and number of people not survivie
df['Survived'].value_counts()

"""Data visualisation"""

sns.set()

import seaborn as sns
print(type(sns))
sns.countplot(x='Survived', data=df)

df['Sex'].value_counts()

#making a count plot for sex column and exact value how many survived
sns.countplot(x='Sex', data=df)

#number of survivers gender wise
sns.countplot(x='Sex', hue='Survived', data=df)

#making  a count plot for pclass column
sns.countplot(x='Pclass', data=df)

#count plot for pclass column and how many survived
sns.countplot(x='Pclass', hue='Survived', data=df)

"""Encodeing the categorical column"""

df['Sex'].value_counts()

df['Embarked'].value_counts()

#convert categorical column
df.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

df.head()

#seperating and features and target
X=df.drop(columns=['PassengerId','Name','Ticket','Survived'],axis=1)
Y=df['Survived']

print(X)

print(Y)

"""splitting the data into training  &test data"""

#splitting the data into training & test data
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#model training using logistic regression
model=LogisticRegression()

#train with training data
model.fit(X_train, Y_train)

#evaluate the model Accuracy score
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)

#accuracy score in test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)

import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the Titanic dataset (already loaded and prepared)
file_path = '/content/drive/My Drive/Titanic-Dataset.csv'
df = pd.read_csv(file_path)

# Clean the dataset (already cleaned)
df = df.drop(columns='Cabin', axis=1)
df['Age'].fillna(df['Age'].mean(), inplace=True)
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
df.replace({'Sex': {'male': 0, 'female': 1}, 'Embarked': {'S': 0, 'C': 1, 'Q': 2}}, inplace=True)

# Separate features and target
X = df.drop(columns=['PassengerId', 'Name', 'Ticket', 'Survived'], axis=1)
Y = df['Survived']

# Splitting the data into training and test sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

# Training the logistic regression model
model = LogisticRegression()
model.fit(X_train, Y_train)

# Function to predict survival
def predict_survival(pclass, sex, age, sibsp, parch, fare, embarked):
    # Convert input values into a format suitable for prediction
    input_data = np.array([[pclass, sex, age, sibsp, parch, fare, embarked]])
    # Make prediction
    prediction = model.predict(input_data)
    # Return prediction result
    return prediction[0]

# User interface loop
print("Welcome to Titanic Survival Prediction")
print("Please enter the following details for a passenger to predict survival:")
print("Enter 'exit' to quit.")

while True:
    pclass = int(input("Pclass (1, 2, or 3): "))
    sex = int(input("Sex (0 for male, 1 for female): "))
    age = float(input("Age: "))
    sibsp = int(input("SibSp (number of siblings/spouses aboard): "))
    parch = int(input("Parch (number of parents/children aboard): "))
    fare = float(input("Fare: "))
    embarked = int(input("Embarked (0 for S, 1 for C, 2 for Q): "))

    # Predict survival
    prediction = predict_survival(pclass, sex, age, sibsp, parch, fare, embarked)
    if prediction == 1:
        print("Prediction: Passenger would survive.")
    else:
        print("Prediction: Passenger would not survive.")

    choice = input("Do you want to predict again? (yes/no): ")
    if choice.lower() != 'yes':
        break

print("Thank you for using the Titanic Survival Prediction!")